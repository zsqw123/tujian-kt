apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'AndResGuard'

android {
  compileSdkVersion rootProject.versions.compilesdk
  buildToolsVersion rootProject.versions.buildtools
  defaultConfig {
    applicationId "cn.dailypics.tujian.r"
    minSdkVersion rootProject.versions.minsdk
    targetSdkVersion rootProject.versions.targetsdk
    versionCode 200318
    versionName "3.0.8"
    def documentsProviderAuthority = "io.nichijou.tujian.localstorage.documents"
    manifestPlaceholders = [documentsProviderAuthority: documentsProviderAuthority]
    buildConfigField("String", "DOCUMENTS_PROVIDER_AUTHORITY", "\"${documentsProviderAuthority}\"")
    buildConfigField("String", "API_BUGLY", "\"${project['API_BUGLY']}\"")
  }
  buildTypes {
    release {
      ndk {
        abiFilters 'armeabi-v7a', 'arm64-v8a'
      }
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    debug {
      ndk {
        abiFilters 'armeabi-v7a', 'arm64-v8a','x86_64'
      }
      minifyEnabled false
      shrinkResources false
      proguardFiles getDefaultProguardFile(
        'proguard-android-optimize.txt'),
        'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
  }
  kotlinOptions {
    jvmTarget = '1.8'
  }
  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }
  lintOptions {
    check 'Interoperability'
  }
  packagingOptions {
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/license.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/notice.txt'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/library_release.kotlin_module'
    exclude 'META-INF/library-core_release.kotlin_module'
  }
  androidExtensions {
    experimental = true
  }
  flavorDimensions 'channel'
  productFlavors {
    official {
      dimension 'channel'
    }

    googlePlay {
      dimension 'channel'
      ndk.abiFilters 'arm64-v8a'
    }
  }
  dexOptions {
    preDexLibraries true
    maxProcessCount 8
  }
}
kapt {
  useBuildCache = true
  correctErrorTypes = true
  javacOptions {
    option("-Xmaxerrs", 500)
  }
}
dependencies {
  implementation project(path: ':boo')
  implementation project(path: ':common')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0'
  implementation "androidx.appcompat:appcompat:${rootProject.versions.appcompat}"
  implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha03'
  implementation 'androidx.viewpager2:viewpager2:1.0.0'
  implementation 'androidx.core:core-ktx:1.3.0-alpha01'
  implementation 'androidx.palette:palette:1.0.0'
  implementation "com.google.android.material:material:${rootProject.versions.material}"
  implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'
  implementation "androidx.fragment:fragment:${rootProject.versions.fragment}"
  implementation "androidx.fragment:fragment-ktx:${rootProject.versions.fragment}"
  implementation "androidx.lifecycle:lifecycle-common-java8:${rootProject.versions.lifecycle}"
  implementation "androidx.lifecycle:lifecycle-extensions:${rootProject.versions.lifecycle}"
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${rootProject.versions.lifecycle}"
  implementation "androidx.lifecycle:lifecycle-runtime-ktx:${rootProject.versions.lifecycle}"
  implementation "androidx.lifecycle:lifecycle-livedata-ktx:${rootProject.versions.lifecycle}"
  implementation "androidx.paging:paging-runtime-ktx:2.1.1"
  implementation 'androidx.work:work-runtime-ktx:2.3.2'
  implementation "androidx.room:room-runtime:${rootProject.versions.room}"
  kapt "androidx.room:room-compiler:${rootProject.versions.room}"
  implementation "androidx.room:room-ktx:${rootProject.versions.room}"
  implementation 'com.google.android:flexbox:1.1.0'
  implementation 'com.squareup.okio:okio:2.3.0'
  implementation "com.squareup.okhttp3:okhttp:${rootProject.versions.okhttp3}"
  implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.versions.okhttp3}"
  implementation "com.squareup.retrofit2:retrofit:${rootProject.versions.retrofit}"
  implementation "com.squareup.retrofit2:converter-moshi:${rootProject.versions.retrofit}"
  implementation "com.squareup.moshi:moshi-kotlin:${rootProject.versions.moshi}"
  kapt "com.squareup.moshi:moshi-kotlin-codegen:${rootProject.versions.moshi}"
  // Kotlin 属性代理
  implementation 'com.chibatching.kotpref:kotpref:2.8.0'
  implementation "org.koin:koin-androidx-scope:${rootProject.versions.koin}"
  implementation "org.koin:koin-androidx-viewmodel:${rootProject.versions.koin}"
  // fresco
  implementation "com.facebook.fresco:fresco:${rootProject.versions.fresco}"
  // Glide
  implementation "com.github.bumptech.glide:glide:${rootProject.versions.glide}"
  implementation "com.github.bumptech.glide:okhttp3-integration:${rootProject.versions.glide}"
  kapt 'com.github.bumptech.glide:compiler:4.11.0'
  // PhotoView
  implementation "com.bm.photoview:library:${rootProject.versions.photoview}"
  // Runtime Permissions
  implementation 'com.afollestad:assent:2.3.0'
  implementation 'com.davemorrissey.labs:subsampling-scale-image-view:3.10.0'
  implementation 'com.google.android.apps.muzei:muzei-api:3.1.0'
  implementation "io.nichijou:oops:${rootProject.versions.oops}"
  implementation "io.nichijou.utils:color:${rootProject.versions.color}"
  implementation 'jp.wasabeef:fresco-processors:2.1.0'
  implementation 'jp.wasabeef:recyclerview-animators:3.0.0'
  implementation 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.3.0'
  implementation "org.jetbrains.anko:anko:${rootProject.versions.anko}"
  implementation "com.zzhoujay.richtext:richtext:${rootProject.versions.richtext}"
  // Bugly
  implementation 'com.tencent.bugly:crashreport_upgrade:1.4.5'
  implementation 'com.tencent.bugly:nativecrashreport:3.7.1'
  // material-dialogs
  implementation 'com.afollestad.material-dialogs:core:3.2.1'
  // 自定义View shape
  implementation 'com.github.florent37:shapeofview:1.4.7'
  // 侧滑
  implementation 'com.billy.android:smart-swipe:1.1.2'
  // fragment 管理
  implementation 'me.xuexuan:fragmentationx:1.0.4'
  // Glide 加载监听
  implementation 'me.jessyan:progressmanager:1.5.0'
  // GMS
  implementation 'com.google.android.gms:play-services-ads:19.0.0'
  // Debug by Chrome
  // implementation "com.facebook.stetho:stetho:${rootProject.versions.stetho}"
  // implementation "com.facebook.stetho:stetho-okhttp3:${rootProject.versions.stetho}"
  // fresco 加载动图
  // implementation "com.facebook.fresco:animated-gif:${rootProject.versions.fresco}"
  // implementation "com.facebook.fresco:animated-webp:${rootProject.versions.fresco}"
  // implementation "com.facebook.fresco:webpsupport:${rootProject.versions.fresco}"
}

andResGuard {
  // mappingFile = file("./resource_mapping.txt")
  mappingFile = null
  use7zip = true
  useSign = true
  // It will keep the origin path of your resources when it's true
  keepRoot = false
  // It will merge the duplicated resources, but don't rely on this feature too much.
  // it's always better to remove duplicated resource from repo
  mergeDuplicatedRes = true
  whiteList = [
    // your icon
    "R.drawable.icon",
    // for fabric
    "R.string.com.crashlytics.*",
    // for google-services
    "R.string.google_app_id",
    "R.string.gcm_defaultSenderId",
    "R.string.default_web_client_id",
    "R.string.ga_trackingId",
    "R.string.firebase_database_url",
    "R.string.google_api_key",
    "R.string.google_crash_reporting_api_key"
  ]
  compressFilePattern = [
    "*.png",
    "*.jpg",
    "*.jpeg",
    "*.gif",
  ]
  sevenzip {
    artifact = 'com.tencent.mm:SevenZip:1.2.16'
    //path = "/usr/local/bin/7za"
  }

  /**
   * Optional: if finalApkBackupPath is null, AndResGuard will overwrite final apk
   * to the path which assemble[Task] write to
   **/
  // finalApkBackupPath = "${project.rootDir}/final.apk"

  /**
   * Optional: Specifies the name of the message digest algorithm to user when digesting the entries of JAR file
   * Only works in V1signing, default value is "SHA-1"
   **/
  // digestalg = "SHA-256"
}
